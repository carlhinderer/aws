-----------------------------------------------------------------------------
| CHAPTER 7 - AUTOMATING OPERATIONAL TASKS WITH LAMBDA                      |
-----------------------------------------------------------------------------

- AWS Lambda

    - Lambda offers execution environments for Java, Node, C#, Python, and Go.  You implement the 
        function, upload your code, and configure the environment.  After that, your code is executed
        in a fully-managed environment.


    - Lambda is well-integrated with other parts of AWS, so we can use it to automate operations tasks.
        For instance, it can add and remove instances to a container cluster or process and analyze log
        files.


    - Lambda is billed by invocation, so you don't have to pay for resources that idle when they're not
        needed.



- Building a Website Health Check with Lambda

    - Lambda is a good choice for a website health check, since it only needs to run once very few
        minutes.  


    - We'll also use AWS CloudWatch in this example.  Typically, you inspect metrics using charts, and 
        create alarms by defining thresholds. For example, a metric could count failures during the 
        functionâ€™s execution. 

      On top of that, CloudWatch provides events that can be used to trigger Lambda functions as well. We 
        are using a schedule to publish an event every 5 minutes here.


    - Our website health check consists of 3 parts:

        1. Lambda function = Executes a Python script, which sends an HTTP request to the website, and
                               verifies that the response includes specific text.

        2. Scheduled event = Triggers the Lambda function once every 5 minutes (similar to cron).

        3. Alarm           = Monitors the number of failed health checks and notifies you via email when
                               the service is unavailable.



- Creating a Lambda Function

    - Schedule expressions, which define recurring tasks, can use either

        - rate($value $unit)
            Ex. For a function that runs once every 5 minutes, use 'rate(5 minutes)''

        - Crontab format
            Ex. For a runction that runs at 8AM everyday, use 'cron(0 8 * * ? *)'


    - To create a function:

        > Services: Lambda
          > Create a function
            > Blueprint: lambda-canary-python3
            > Function name: website-health-check

            > Role: Create custom Role
              > Create a new IAM Role
              > name: lambda_basic_execution
              > 'Allow'
              > Select new role from drop-down

            > Rule: Create new rule
              > Rule name: website-health-check
              > Description: Check website every 5 minutes
              > Rule type: Schedule expression
              > Schedule expression: rate(5 minutes)


    - The Python code references 2 environment variables in the code:

        - site = The URL of the website we want to monitor

        - expected = Snippet of text that must be available on website for test to pass



- Monitoring Lambda Function with CloudWatch

    - If you want to see your Lambda function's log messages, naviagate to 'Monitoring > View Logs in
        CloudWatch'.  By default, your Lambda function sends log messages to CloudWatch.

      A log group named '/aws/lambda/website-health-check' was created automatically and collects the logs 
        from your function.


    - When writing your own Python, you can use 'print' statements or use the 'logging' module to print
        custom log messages.  This is very handy for debugging.


    - The CloudWatch metrics screen shows:

        - Invocations = # of times function has been called

        - Errors = # of times function failed due to errors inside the function (ie timeouts, exceptions)

        - Duration = how long function takes to run

        - Throttles = how many times too many copies of function are running at the same time


    - To create an alarm that will email us if the function fails:

        > Services: CloudWatch
          > All Alarms
            > Create Alarm
              > Lambda Metrics > By Function Name
                > website-health-check: Errors
                  > Statistic: Sum
                  > Update: 5 minutes
                  > Timespan: 5 minutes ago to now
                  > 'Next'
                  > Threshold: > 0
                  > 'In alarm'
                  > Add email
                  > 'Create Alarm'


    - To clean up:

        - Delete the Lambda function
        - Delete the CloudWatch log group
        - Delete the CloudWatch alarm
        - Delete the IAM Role



- Accessing Endpoints within a VPC

    - By default, Lambda functions run outside your VPC networks.  For instance, our website-health-check
        function was sending HTTP requests over the internet.


    - If we wanted to run a health check for an internal web site not available on the internet, we can
        add network interfaces to our Lambda function.  To do this, you have to define the VPC, subnets,
        and security groups for the Lambda function.  We'll often do this to access databases.


    - Note that we should only do this if we have to, since it adds complexity.



- Adding a Tag Containing the Owner of an EC2 Instance Automatically

    - Now, we'll implement a Lambda function from scratch, rather than using a predefined blueprint.  We'll
        add a tag to each EC2 instance that tells us who created it, to keep our team organized.


    - In this case, we'll trigger the function based on an event rather than timing.  This is done using
        CloudWatch Events.  Whenever something changes in our infrastructure, an event is generated in
        near-real-time.

        1. CloudTrail emits an event for every call to the AWS API.

        2. EC2 emits events whenever the state of an instance changes (ie Pending to Running).

        3. AWS emits an event to notify you of service degradations or downtimes.


    - We'll execute a function for every event that indicates the launch of a new EC2 instance.  We'll
        add a rule to trigger the function when this event occurs.


    - Here are the relevant fields in the CloudTrail event we are watching for:

        detail_type           # Event has been created by CloudTrail
        source                # The EC2 service is the source of the event
        eventName             # Looking for 'RunInstances', which indicates an EC2 instance was launched
        userIdentity          # Who called the AWS API?
        responseElements      # Response from AWS API when instance was launched


    - A rule consists of an event pattern for selecting events, along with the definition of one or
        multiple targets.  This pattern selects all CloudTrail events generated by an AWS API call
        affecting the EC2 service.

        {
          "detail-type": [
            "AWS API Call via CloudTrail"
          ],
          "source": [
            "aws.ec2"
          ],
          "detail": {
            "eventName": [
              "RunInstances"
            ]
          }
        }



- Implementing the Lambda Function in Python

    - Here is the form of the function we will use:

        def lambda_handler(event, context):
            # Code here...
            return


    - Here is our function:

        # lambda_function.py
        --------------------------------------------
        import boto3
        ec2 = boto3.client('ec2')

        def lambda_handler(event, context):
            userName = event['detail']['userIdentity']['arn'].split('/')[1]
            instanceId = event['detail']['responseElements']['instancesSet']['items'][0]['instanceId']    
            print("Adding owner tag " + userName + " to instance " + instanceId + ".")
            ec2.create_tags(Resources=[instanceId,],Tags=[{'Key': 'Owner', 'Value': userName},])
            return


    - Now, we can deploy the Lambda function and all it's dependencies.



- Setting Up a Lambda Function with the SAM (Serverless Application Model)

    - AWS released the SAM in 2016.  It is an open source framework for building serverless applications,
        extending CloudFormation templates to make it easier to deploy Lambda functions.

        ---
        AWSTemplateFormatVersion: '2010-09-09'
        Transform: AWS::Serverless-2016-10-31
        Description: Adding an owner tag to EC2 instances automatically
        Resources:
          EC2OwnerTagFunction:
            Type: AWS::Serverless::Function
            Properties:
              Handler: lambda_function.lambda_handler
              Runtime: python3.6
              CodeUri: '.'
              Policies:
              - Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Action: 'ec2:CreateTags'
                  Resource: '*'
              Events:
                CloudTrail:
                  Type: CloudWatchEvent
                  Properties:
                    Pattern:
                      detail-type:
                      - 'AWS API Call via CloudTrail'
                      source:
                      - 'aws.ec2'
                      detail:
                        eventName:
                        - 'RunInstances'



- Authorizing a Lambda Function to Use AWS Services with an IAM Role

    - Since Lambda functions interact with AWS services, we need the calls to the AWS API to be
        authenticated and authorized.


    - Temporary credentials are generated based on the IAM role and injected into each invocation via
        environment variables.  These environment variables are used by the AWS SDK to sign requests
        automatically.


    - This role is defined by the 'Policies' section of the CloudFormation template.



- Deploying a Lambda Function with SAM

    - To deploy a Lambda function, you need to upload the deployment package to S3.  The deployment
        package is a zip file including your code, as well as other modules.


    - First, create an S3 bucket to store the deployment packages.

        # Replace $yourname so all readers don't conflict
        $ aws s3 mb s3://ec2-owner-tag-$yourname


    - Next, create the deployment package and upload it to S3.

        $ aws cloudformation package --template-file template.yaml \
            --s3-bucket ec2-owner-tag-$yourname --output-template-file output.yaml


    - Now, we can deploy the CloudFormation stack.

        $ aws cloudformation deploy --stack-name ec2-owner-tag \
            --template-file output.yaml --capabilities CAPABILITY_IAM



    - Now, our lambda function is up and running.  We can now create a new EC2 instance, and we'll see
        that it's tagged with our user name 'myuser'.


    - To clean up:

        - Terminate the new EC2 instance we just created.


        - Delete the lambda function and it's dependencies:

            $ aws cloudformation delete-stack --stack-name ec2-owner-tag


        - Delete the S3 bucket we created:

            $ aws s3 rb s3://ec2-owner-tag-$yourname --force
