-----------------------------------------------------------------------------
| CHAPTER 11 - RDS: RELATIONAL DATABASE SERVICE                             |
-----------------------------------------------------------------------------

- RDS

    - If you want a relational DB on AWS, you have 2 options:

        1. Use RDS
        2. Run the RDBMS yourself on EC2 instances


    - RDS DBMS Options:

        - PostgreSQL
        - MySQL
        - MariaDB
        - Oracle
        - Sql Server
        - Amazon Aurora



- Starting a MySQL Database

    - We'll run a MySQL database on RDS in order to host a WordPress instance.  We'll use the same
        CloudFormation stack we used in Chapter 2.

        $ aws cloudformation create-stack --stack-name wordpress --template-url \
            https://s3.amazonaws.com/awsinaction-code2/chapter11/template.yaml \
            --parameters ParameterKey=KeyName,ParameterValue=mykey \
            ParameterKey=AdminPassword,ParameterValue=test1234 \
            ParameterKey=AdminEMail,ParameterValue=your@mail.com


    - These are the attributes that are specified when a new RDS instance is created:

        AllocatedStorage         # Size of your DB (in GB)
        DBInstanceClass          # Size (instance type) of underlying VM
        Engine                   # Database engine (ie MySQL)
        DBName                   # Identifier for DB
        MasterUsername           # Name for master user
        MasterUserPassword       # Password for master user


    - It's possible to make an RDS instance publicly accessible, but this is generally not recommended.
        Instead, an RDS instance should only be accessible within a VPC.


    - To connect to an RDS instance, you need an EC2 instance running in the same VPC.  First, connect to
        the EC2 instance.  Then, you can connect to the RDS instance.

        Resources:
          # [...]
          DatabaseSecurityGroup:
            Type: 'AWS::EC2::SecurityGroup'
            Properties:
              GroupDescription: 'awsinaction-db-sg'
              VpcId: !Ref VPC
              SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 3306
                ToPort: 3306
                SourceSecurityGroupId: !Ref WebServerSecurityGroup

          Database:
            Type: 'AWS::RDS::DBInstance'
            DeletionPolicy: Delete
            Properties:
              AllocatedStorage: 5
              BackupRetentionPeriod: 0
              DBInstanceClass: 'db.t2.micro'
              DBName: wordpress
              Engine: MySQL
              MasterUsername: wordpress
              MasterUserPassword: wordpress
              VPCSecurityGroups:
              - !Sub ${DatabaseSecurityGroup.GroupId}
              DBSubnetGroupName: !Ref DBSubnetGroup
            DependsOn: VPCGatewayAttachment

          DBSubnetGroup:
            Type: 'AWS::RDS::DBSubnetGroup'
            Properties:
              Description: DB subnet group
              SubnetIds:
              - Ref: SubnetA
              - Ref: SubnetB


    - Once our RDS instance is launched, AWS handles most of the tasks necessary to operate your DB in
        a secure and reliable way.  The only things we need to do are:

        1. Monitor your DB's available storage, and increase the allocated storage as needed.

        2. Monitor your DB's performance and make sure you increase I/O and CPU as needed.


    - Once the CloudFormation stack creation is complete, we can get the details to connect to our DB.

        # Make sure stack creation is complete
        $ aws cloudformation describe-stacks --stack-name wordpress

        # Get connection details for DB
        $ aws rds describe-db-instances --query "DBInstances[0].Endpoint"


    - For an idea of how much the monthly price is for an RDS instance:

        Database instance db.m3.medium                         $65.88 USD
        50 GB of general purpose (SSD)                         $5.75 USD
        Additional storage for database snapshots (100 GB)     $9.50 USD
        ---------------------------------------------------------------------
        Total                                                  $81.13 USD



- Importing Data into a Database

    - To import a database from your local environment into RDS, follow these steps:

        1. Export the local database
        2. Start a VM in the same region and VPC as the RDS database
        3. Upload the DB dump to the VM
        4. Run an import of the DB dump to the RDS database on the virtual server


    - For instace, to export a MySQL database:

        # Export all databases
        $ mysqldump -u $UserName -p --all-databases > dump.sql

        # Export specific database
        $ mysqldump -u $UserName -p $DatabaseName > dump.sql


    - When migrating a huge DB to AWS with minimal downtime, the AWS DMS (Database Migration Service) 
        can be very helpful.


    - Before we import the database, we can view our WordPress instance, and see that no posts have been
        created.

        # Get URL for WordPress instance
        $ aws cloudformation describe-stacks --stack-name wordpress \
            --query "Stacks[0].Outputs[0].OutputValue" --output text


    - First, we'll get the public IP address of 1 of the 2 EC2 instances we created:

        $ aws ec2 describe-instances --filters "Name=tag-key,\
            Values=aws:cloudformation:stack-name Name=tag-value,\
            Values=wordpress" --output text \
            --query "Reservations[0].Instances[0].PublicIpAddress"


    - Then, we'll SSH into the machine:

        $ ssh -i $PathToKey/mykey.pem ec2-user@$PublicIpAddress


    - We'll download a MySQL database dump of a WordPress blog.  The dump contains a blog post and a few
        comments.

        $ wget https://s3.amazonaws.com/awsinaction-code2/chapter11/wordpress-import.sql


    - Now, we're ready to import the MySQL database dump to the RDS instance.  We'll use the database
        connection details we obtained above.

        # Get database connection details
        $ aws rds describe-db-instances --query "DBInstances[0].Endpoint"

        # Import the MySQL database, password is 'wordpress'
        $ mysql --host $DBHostName --user wordpress -p < wordpress-import.sql


    - Now, we can refresh the WordPress page, and we'll see the imported posts and comments.



- Automated Backups

    - RDS is a managed service, but we still need to make backups in case something happens to our data
        or we need to duplicate it to another region.  RDS offers both maunal and automated snapshots.


    - To configure automated snapshots, we can set the 'BackupRetentionPeriod' on the VM between 1-35
        (the number of days the snapshot will be retained).  Automated snapshots are created once a
        day.  They require all disk activity to be briefly frozen, so we should pick a time of low
        usage to run them.


    - This changes the automated backup to run from 5:00-6:00 UTC, and updates the retention period to
        3 days:

        $ aws cloudformation update-stack --stack-name wordpress --template-url \
            https://s3.amazonaws.com/awsinaction-code2/chapter11/ \
            template-snapshot.yaml \
            --parameters ParameterKey=KeyName,UsePreviousValue=true \
            ParameterKey=AdminPassword,UsePreviousValue=true \
            ParameterKey=AdminEMail,UsePreviousValue=true


    - If we want to disable automated snapshots, we can set the retention period to 0.



- Manual Snapshots

    - You can also trigger maunal snapshots whenever needed, like before you release a new verions of your
        application, migrate a schema, or perform some other major change.

        # Create a snapshot
        $ aws rds create-db-snapshot --db-snapshot-identifier \
            wordpress-manual-snapshot \
            --db-instance-identifier $DBInstanceIdentifier

        # Check the current status of the snapshot
        $ aws rds describe-db-snapshots --db-snapshot-identifier wordpress-manual-snapshot


    - If you want to keep an automated snapshot beyond the retention period, you can copy it into a
        manual shapshot.

        $ aws rds copy-db-snapshot \
            --source-db-snapshot-identifier $SnapshotId \
            --target-db-snapshot-identifier wordpress-copy-snapshot



- Restoring a Database

    - If you restore a database from an automated or manual snapshot, a new database will be created
        based on the snapshot.  You can't restore a snapshot to an existing database.


    - To create a new database in the same VPC as our WordPress platform, we need to find the existing
        database's subnet group.

        $ aws cloudformation describe-stack-resource \
            --stack-name wordpress --logical-resource-id DBSubnetGroup \
            --query "StackResourceDetail.PhysicalResourceId" --output text


    - Now, we can create a new database based on the manual snapshot we took earlier:

        $ aws rds restore-db-instance-from-db-snapshot \
            --db-instance-identifier awsinaction-db-restore \
            --db-snapshot-identifier wordpress-manual-snapshot \
            --db-subnet-group-name $SubnetGroup


    - Now, a new database named 'awsinaction-db-restore' has been created.  We can now switch our
        WordPress application to use the new database.



- Copying a Database to Another Region

    - To copy our database to another region using our snapshot:

        $ aws rds copy-db-snapshot --source-db-snapshot-identifier \
            arn:aws:rds:us-east-1:$AccountId:snapshot:\
            wordpress-manual-snapshot --target-db-snapshot-identifier \
            wordpress-manual-snapshot --region eu-west-1


    - To clean up, we need to delete all snapshots, database instances, and the WordPress CloudFormation
        stack.



- Controlling Access to a Database

    - It's the customer's responsibility to specify rules controlling access to our data and the RDS
        database.  There are 3 layers that control access to an RDS database:

        1. Configuration access management

             IAM policies control access to the configuration of network access management and the
               configuration of the database.

        2. Network access management

             Firewall rules control access to the database on the network level.  We use security groups
               for the database instance and ACLs on subnets.

        3. Database access management

             User and access management from the database system itself controls access to data.



- Controlling access to the configuration of an RDS database

    - Access to the RDS service is controlled using the IAM service.  IAM controls access to 
        creating, updating, and deleting an RDS instance.


    - IAM doesn't manage access inside the database - that's the database engine's job.


    - This creates an IAM policy that allows access to all RDS configuration and management actions.
        You can use this policy by only attaching it to trusted IAM users and groups.

        {
          "Version": "2012-10-17",
          "Statement": [{
            "Sid": "Stmt1433661637000",
            "Effect": "Allow",
            "Action": "rds:*",
            "Resource": "*"
          }]
        }


    - This policy denies all destructive acts in order to prevent data loss by human failure.

        {
          "Version": "2012-10-17",
          "Statement": [{
            "Sid": "Stmt1433661637000",
            "Effect": "Deny",
            "Action": ["rds:Delete*", "rds:Remove*"],
            "Resource": "*"
          }]
        }



- Controlling Network Access to an RDS Database

    - An RDS database is linked to security groups.  Each security group consists of rules for a firewall
        controlling inbound and outbound database traffic.


    - Here is the security group we used for our WordPress database.  Inbound connections to port 3306
        (the default MySQL port) are only allowed from VMs linked to the security group
        'WebServerSecurityGroup'.

        DatabaseSecurityGroup:
          Type: 'AWS::EC2::SecurityGroup'
          Properties:
            GroupDescription: 'awsinaction-db-sg'
            VpcId: !Ref VPC
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 3306
              ToPort: 3306
              SourceSecurityGroupId: !Ref WebServerSecurityGroup



- Controlling Data Access

    - A database engine also implements access control itself.  For example, you typically define a user
        for each application and grant rights to access and manipulate tables as needed.


    - Typical use cases for database access control include:

        - Limiting writes only to certain users
        - Limiting access to specific tables only to certain users
        - Limiting access to table to isolate different applications (ie different customers)



- Relying on a Highly Available Database

    - RDS lets you launch HA (High Availability) databases.  An HA RDS database has 2 database instances,
        a master and a standby.


    - All clients send requests to the master database.  Data is replicated between the master and standby
        synchronously.  If the master becomes unavailable due to hardware or network failures, RDS starts
        the failover process.  The standby becomes the master, and DNS is updated.  This does not require
        human intervention.


    - This is strongly recommended for all databases that handle production workloads.  We can turn it off
        on test databases to save money.


    - To enable high-availability for an RDS database, we can update our CloudFormation stack to use a
        slightly different template.  This is in 'templates/11_rds/template-multiaz.yaml'.  Note that
        the 2 instances are in different availability zones (data centers), which is why this feature
        is called 'Multi AZ'.



- Tweaking Database Performance

    - The easiest way to scale a database is vertically.  To do this, you can increase CPU, memory, and/or
        storage.  The largest RDS instance has 96 CPUs and 384 GB of RAM.


    - To increase the RDS instance's resources, we can change the instance type using a CloudFormation
        template, the CLI, the management console, or SDK's.


    - Like EBS, RDS offers 3 disk types:

        1. General purpose (SSD)
        2. Provisioned IOPs (SSD)
        3. Magnetic

      SSDs should be used for Production workloads.  To guarantee a high level of read and write
        throughput, you should use Provisioned IOPs.


    - A database suffering from too many read requests can be scaled horizontally by adding additional
        read replicas.  RDS supports read replication for MySQL, MariaDB, and PostgreSQL databases.

      When a read replica is created, these steps are triggered in the background:

        1. Create a snapshot from the source database (the master database).

        2. Launch a new database based on that snapshot.

        3. Activate replication between the master and read-replication databases.

        4. Create an endpoint for SQL read requests to the read-replication database.


    - To create a read replica:

        $ aws rds create-db-instance-read-replica \
            --db-instance-identifier awsinaction-db-read \
            --source-db-instance-identifier $DBInstanceIdentifier


    - To promote a read replica to master:

        $ aws rds promote-read-replica --db-instance-identifier awsinaction-db-read



- Monitoring a Database

    - Some important RDS metrics to monitor:

        FreeStorageSpace
        CPUUtilization
        FreeableMemory
        DiskQueueDepth      # Number of outstanding requests to disk
        SwapUsage