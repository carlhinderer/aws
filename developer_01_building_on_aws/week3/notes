-----------------------------------------------------------------------
|  AWS DEVELOPER: BUILDING ON AWS - WEEK 3                            |
-----------------------------------------------------------------------

- AWS IAM

    1. A trusted identity assumes a role, and sends a request to the security token service.

        TRUSTED IDENTITY                                    SECURITY
                                 (Assume Role)              TOKEN
          AWS Account         ------------------>           SERVICE
          AWS Service


    2. The Security Token Service Sends back temporary security credentials.

                                (Temp Security Creds)       SECURITY
        TRUSTED IDENTITY      <------------------------     TOKEN
                                                            SERVICE


    3. The trusted identity can now access AWS Resources.

        TRUSTED IDENTITY      ------------------>           RESOURCES

                                                            ie S3


    - A role has permissions, which are created using a policy.



- IAM Example

    - We want our EC2 instance to be able to call the Rekognition service to get tags.

    - The Trusted Identity will be EC2, which will attach a role to new instances that are created.

    - The boto3 SDK will know how to obtain temporary security credentials and assume the roles
        granted automatically by reading the instance metadata service.



- Amazon RDS

    - 2 Replication Models - 1 for availability (Multi-AZ) and 1 for scaling reads
    - MySQL, MariaDB, Postgres, Oracle, SqlServer, or Amazon Aurora DB engines
    - Can automate backups

    - DB Instance = isolated cloud database environment, can contain multiple databases



- Exercise 7 - Using Amazon RDS

    1. Create an Amazon RDS database instance.
    2. Modify the security group of the Amazon RDS database.
    3. Download the exercise code .zip file and unzip it to your AWS Cloud9 environment.
    4. Explore the exercise code.
    5. Run the database script.
    6. Configure environment variables and run and test the code.
    7. Stop the Amazon RDS database instance.



- Intro to Availability

    - S3
        - Already replicated across regions
        - Allows versioning

    - RDS
        - Creates nightly backups
        - Allows Multi-AZ operation

    - EC2
        - Can create multiple instances in different AZs
        - The latency between AZs is small enough to synchronously replicate data
        - Can load balance them



- Load Balancing

    1. Network config for listening and AZs

    2. Register EC2 instances

    3. Configure health check

    4. Start using load balancer host name in DNS



- Exercise 8

    1. Start the Amazon RDS database instance.
    2. Create a security group in edx-build-aws-vpc network to allow web traffic to the Amazon 
         EC2 instance acting as the web server.
    3. Modify the Amazon RDS database security group to allow traffic from the web server.
    4. Create an Amazon S3 bucket for storing the deployment artifacts.
    5. Update the configuration files.
    6. Create the deployment .zip package with updated settings.
    7. Copy the deployment package to the Amazon S3 bucket.
    8. Create an AWS IAM role to allow the user to download the deployment package.
    9. Provision Amazon EC2 instances and deploy the application via user data
    10. Test the deployed application on the Amazon EC2 instances.
    11. Create and configure the Application Load Balancer.
    12. Take one web server down and test for the availability of the application.
    13. Terminate the Amazon EC2 instances.
    14. Delete the load balancer.
    15. Stop the Amazon RDS database instance.