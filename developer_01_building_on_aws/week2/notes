-----------------------------------------------------------------------
|  AWS DEVELOPER: BUILDING ON AWS - WEEK 2                            |
-----------------------------------------------------------------------

- Everything in AWS is an API call

    - There are SDKs for calling these APIs in a variety of programming languages
    - We'll use Boto3, the Python AWS SDK

        $ pip install boto3

    - To access the API, we'll need application credentials:

        AWS_ACCESS_KEY
        AWS_SECRET_KEY

    - We'll also associate privileges to the account that corresponds to the keys.

    - We'll also need to install the AWS CLI.



- Exercise 4 - Set Up an IAM User and Configure AWS CLI

    1. Create an AWS IAM policy.
    2. Create an AWS IAM user, attach a policy to the user, and generate access keys.
    3. Create an Amazon EC2 instance and configure AWS CLI with the access keys of the 
         AWS IAM user edXProjectUser.
    4. Install Boto 3 on the instance and explore Boto 3 APIs.
    5. Terminate the Amazon EC2 instance.



- Amazon S3

    - Designed for:

        Durability = 99.999999999 % ("11 9s")
        Availability = 99.99 % ("4 9s")


    - Buckets

        - Live in a region
        - Provide a location for data (ie 'russ-photos')
        - Key is file path (ie 'puppy.jpg')
        
        - Example
            https://russ-photos.s3.amazonaws.com/photo/puppy.jpg



- S3 Access Control

    - By deafult, all S3 resources are private.  Only the AWS account that created the resources
        can access them.

    - We can configure access control via 3 methods:

        1. Bucket Policies
        2. IAM Users and Groups
        3. Access Control Lists



- Exercise 5 - Configure the AWS Cloud9 environment and Add S3

    1. Create AWS Cloud9 environment and explore the environment.
    2. Create an Amazon S3 bucket to store the application photos.
    3. Build the Amazon S3 uploader component of the application in the AWS Cloud9 environment.



- Amazon Rekognition

    - Object and Scene Detection
    - Facial Analysis
    - Facial Recognition

    - Gives you back labels, along with confidence ratings for each tag

    - Possible Uses for Facial Recognition
        - Find text in imanges
        - Person tracking
        - Find unsafe content
        - Celebrity recognition



- Example - Using Rekognition Label Detections

    import pprint
    import boto3

    from PIL import Image, ImageDraw

    rek = boto3.client('rekognition')

    with open('MonaLisa.jpg', 'rb') as f:
        image_bytes = f.read()

    # Send image to rekognition for label detection
    response = rek.detect_labels(
        Image = {
            'Bytes': image_bytes
        })

    # Print response
    pprint.pprint(response)

    # Output Excerpt
    #  {'Labels': [{'Confidence': 99.31106, 'Name': 'Human'},
    #              {'Confidence': 99.31106, 'Name': 'People'},
    #              {'Confidence': 97.07397, 'Name': 'Art'},
    #              {'Confidence': 97.07397, 'Name': 'Painting'} ]}, ...



- Example - Using Rekognition Facial Detection

    # Send image for facial detection
    response = rek.detect_faces(
        Image = {
            'Bytes': image_bytes
        },
        Attributes=['ALL'])

    # Print response
    pprint.pprint(response)

    # Output Excerpt
    # {'FaceDetails': [{'AgeRange': ...,
    #                   'Beard': ...,
    #                   'Emotions': ...,
    #                   'Eyeglasses': ...,
    #                   'Gender': ...}], ...
    # }



- Example - Using Rekognition Text Detection

    # Here we send in an example of a street sign
    with open('pike-st.jpg', 'rb') as f:
        image_bytes = f.read()

    response = rek.detect_text(
        Image = {
            'Bytes': image_bytes
        })

    pprint.pprint(response)

    # Output Excerpt
    # {'DetectedText': 'Pike St 1500', ...}



- Exercise 6 - Add Amazon Rekognition

    1. Download the exercise code .zip file to your AWS Cloud9 environment.
    2. Unzip the exercise code .zip file.
    3. Explore the exercise code.
    4. Run and test the code.