-----------------------------------------------------------------------
|  AWS DEVELOPER: BUILDING ON AWS - WEEK 1                            |
-----------------------------------------------------------------------

- Exercise 1 - Sign Up For an AWS Account

    1. Sign up for an account
    2. Add a payment method
    3. Verify your phone number
    4. Choose a support plan (Basic Plan)
    5. Log into the console



- Launching an EC2 Instance

    - Amazon Linux AMI
    - Instance Type: t2.micro
    - Advanced Details = user data script
        > As Text
        > Copy userDataScript.sh into text area
    - Storage - Leave Defaults
    - Add Tag
        Key: Name
        Value: SamplePythonFlaskApp
    - Security Group = like a virtual firewall, allows control to/from instance
    - Inbound Rules - Leave Defaults
        - HTTP (80) from 0.0.0.0/0
        - SSH (22) from 0.0.0.0/0
    - Create new Key pair
        - Name: MyKeyPair



- Exercise 2 - Launch an EC2 Instance with a user data script

    1. Launch an EC2 instance with a user data script
    2. Test the sample app running on your instance
    3. Terminate the EC2 instance



- Networking in AWS

    - To connect our instances and services together, we use a VPC (Virtual Private Cloud).
    - VPC can connect to internet, connect our cloud resources, and can connect to company's 
        private network.

    - At instance creation, each instance gets a private IP.
    - Can also create a public IP (for instance, web server needs this, DB server does not).

    - We launch EC2 instances into subnets (using CIDR notation) to make them easier to manage
    - CIDR
        - Example: 10.0.0.0/16 for our private IPs
        - The '16' indicates that the first 16 bits are fixed (10.0)
        - The floating range gives us 10.0.0.0 to 10.0.255.255

    - To allow internet access to our VPC, we define a 'route' in our 'route table'.

    - VPCs have region scope
    - Subnets have AZ scope
    - We'll make this easy to deal with using a 'Cloud Formation Template'



- AWS vs Developer Responsibility

    - Should port 80 be open on my EC2 instance?
        - Yes - if it is a web server.
        - No - if it is something else, like a DB server.

    - Responsibility of Tech Stack

        Data and Config
        Application            DEVELOPER RESPONSIBILITY
        Guest OS
        -------------------------- EC2
        Hypervisor
        Network                AWS RESPONSIBILITY
        Physical

    - Other services (like RDS or S3) will move the AWS responsiblity up the ladder.



- Exercise 3 - Create and Configure a VPC

    1. Launch an AWS CloudFormation template to create VPC and subnets
    2. Launch an Amazon EC2 instance with a user data script in a VPC
    3. Connect to your Amazon EC2 instance
    4. View log file, query instance metadata, and user data
    5. Terminate the Amazon EC2 instance