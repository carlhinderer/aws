-----------------------------------------------------------------------
| CHAPTER 6 - NETWORKING SERVICES - VPCs, ROUTE53, & CLOUDFRONT       |
-----------------------------------------------------------------------

- On-Premises Corporate Networks

    - Corporate networks are usually divided into multiple smaller networks.  At the most basic level, a corporate
        network consists of:

        1. An internal network for internal backend purposes
        2. A DMZ, where services such as web servers that con be exposed to the internet are deployed


    - For one example of a corporate setup:

        1. A Backend Network vLAN is not connected to the internet

        2. An EUC (End User Computing) vLAN has workstations that can make egress connections to the internet

        3. A DMZ vLAN with the company's web servers that allows ingress connections from the internet


    - Similarly, on AWS, we need to configure virtual networks in a manner that offers security, isolation, and
        inbound access only where it is needed.



- IPv4

    - IPv4 addresses consist of 4 octets, each with a value 0-255.

        Decimal:  192.168.1.6
        Binary:   11000000.10101000.00000001.00000110


    - IPv4 can only support 2**32 addresses (~4B).  For this reason, the IANA decided to allocate ranges of
        addresses for private use only.  These can be used within networks and won't cause conflicts with other
        networks.

        10.0.0.0/8         # 10.0.0.0 - 10.255.255.255
        172.16.0.0/12      # 172.16.0.0 - 172.31.255.255
        192.168.0.0/16     # 192.168.0.0 - 192.168.255.255

        169.254.0.0 - 169.254.255.255        # APIPA addresses used for internal Microsoft networks


    - Hosts with private IPv4 addresses still need to be able to reach the internet.  NAT, a service configured
        on the router, is used for this.  The router has a public IP address and relays requests from internal
        devices to the internet, acting as a proxy in between.


    - IPv6 was created by the IETF to address the limitations of IPv4.  IPv6 uses 128-bit addresses, so it gives
        us 2**128 addresses.  AWS offers IPv6 as an option to set up cloud networks, but many companies
        continue to use IPv4 due to NAT capabilities and interopability with legacy devices.



- Network Sizes and Classes

    - The IETF designed different classes of IPv4 addresses to help define different network sizes and use cases.
        Classes A-C are unicast addresses that the public can use to build networks.  Class D are multicast
        addresses, and Class E is reserved for experimental use.


    - The way these classes define network sizes is to split the IP address into a network portion and a host
        portion.

        - Class A
            - The first 8 bits are the network portion (Range 0-127)
            - The remaining 24 bits are the host portion
            - The far left bit is set to 0 to denote class A

            0          Network     Host
            [1 bit]    [8 bits]    [24 bits]


        - Class B
            - The first 16 bits are the network portion (Range 128-191)
            - The remaining 16 bits are the host portion
            - The 2 far left bits are set to 10 to denote class B

            10         Network    Host
            [2 bits]   [16 bits]  [16 bits]


        - Class C
            - The first 24 bits are the network portion (Range 192-223)
            - The remaining 8 bits are the host portion
            - The 2 far left bits are set to 11

            110        Network    Host
            [3 bits]   [24 bits]  [8 bits]


    - We can easily figure out which class a particular IP address belongs to.

        - We can confirm that 192.168.1.6 is a class C address
        - This means that the network portion is 192.168.1.x
        - The host (x) can be any number 1-254


    - Note that the first and last addresses of any host network are unusable.

        - The first address in a host network is known as the 'network ID'.
            192.168.1.0

        - The last address in a host network is known as the 'broadcast address'.
            192.168.255.255

        - To find the number of usable addresses in an IP block:
            2**number_of_host_bits - 2



- Subnet Masks

    - Subnet masks allow you to split an IP address block into a network portion and host portion.  Host devices
        on the same network portion can easily talk to one another and will need some form of routing to talk to 
        hosts in other networks.


    - With our previous example, the network portion is 24 bits and the host portion is 8 bits.

        IP Address
        (192.168.1.6)       11000000 10101000 00000001 00000110

        Subnet Mask
        (255.255.255.0)     11111111 11111111 11111111 00000000

        Logical AND         
        (192.168.1.0)       11000000 10101000 00000001 00000000


    - If 2 IP addresses ANDed together with their subnet mask produce the same value, they are on the same network.



- Subnetting

    - Subnetting is the process by which you can create subnetworks within a larger network.  In each network, you
        may need to create smaller, isolated portions of the network, such as one portion for backend servers and
        one portion for frontend servers.

    - The process of creating subnets involves borrowing additional bits from the host portion of an IP address
        range.  The borrowed bits are used to create smaller subnetworks within a larger primary network.


    - For example, if we want to create 8 subnetworks, each capable of hosting 30 IP addresses, using a standard
        Class C address, we could use the folloring blocks:

        Network 1 – 192.168.1.0 (subnet mask: 255.255.255.0)
        Network 2 – 192.168.2.0 (subnet mask: 255.255.255.0)
        Network 3 – 192.168.3.0 (subnet mask: 255.255.255.0)
        Network 4 – 192.168.4.0 (subnet mask: 255.255.255.0)
        Network 5 – 192.168.5.0 (subnet mask: 255.255.255.0)
        Network 6 – 192.168.6.0 (subnet mask: 255.255.255.0)
        Network 7 – 192.168.7.0 (subnet mask: 255.255.255.0)
        Network 8 – 192.168.8.0 (subnet mask: 255.255.255.0)

     This design works perfectly, but wastes a lot of addresses.  It may not be a big deal if you use private
       addresses, but you must typically pay for public IP addresses.


    - Instead of using this approach, we can use subnetting and subnet masks to break up a single network into
        multiple smaller networks.  To do this, we'll borrow 3 bits from the host portion to create 8 subnets
        in a single network.

        IP Address Block =  192.169.1.0
        Subnet Mask =       255.255.255.224

    
      Here, we can see that 8 individual subnetworks can be created:

        [Block 1]  192.168.1.0      (192.168.1.0 - 192.168.1.31)
        [Block 2]  192.168.1.32     (192.168.1.32 - 192.168.1.63)
        [Block 3]  192.169.1.64
        [Block 4]  192.168.1.96
        [Block 5]  192.168.1.128
        [Block 6]  192.168.1.160
        [Block 7]  192.168.1.192
        [Block 8]  192.168.1.224


    - Using subnet masking, we can identify which network a particular IP address belongs to.

        IP Address:     192.168.1.130
        Subnet Mask:    255.255.255.224

        Network:        192.168.1.128



- CIDR (Classless Interdomain Routing)

    - Instead of using subnet masking, we can use CIDR.  With CIDR, you can create networks of different sizes
        like we do with subnet masks, but it offers more flexibility.  You can divide your network into smaller
        subnets using CIDR blocks.


    - When defining a network, CIDR blocks are displayed as part of the IP address block with a slash followed
        by a block.  For example, the IP address 192.168.1.6 could belong to a network 192.168.1.0/24.

        - A CIDR block of /24 will have 8 bits for the host, so there are 256 possible IP addresses in the
            block.  The IP network with a CIDR block of 192.168.1.0/24 is a single network that can host
            addresses from 192.168.1.1 - 192.168.1.254.


    - For another example, we will use the IP range from 10.0.0.0 - 10.0.255.255, which is a private range for
        our internal network.

        - We'll use a network IP with a CIDR block of 10.0.0.0/16.  In this network, we'll have 2**16 = 65,536
            IP addresses.  Subtracting the network and broadcast addresses, we can have 65,534 possible hosts.

        - This is a very large network, so we may want to divide this network into smaller subnets for resource
            isolation and separation.  We can create subnets by increasing the CIDR block value.  To do this,
            we can have subnets of 10.0.0.0/20 within the 10.0.0.0/16 network.  Each subnet would have
            2**12 - 2 = 4,094 usable IP addresses.



- VPCs (Virtual Private Clouds)

    - A VPC is a virtual network in the cloud.  You choose the Region and parameters, such as the IP address
        range and any subnets for resource isolation.

    - Resources deployed in your VPC can then access services on the internet or grant inbound access from the
        internet (for instance, if you're hosting a web server).

    - AWS automatically provides you with a default VPC in each Region.  These default VPCs are designed to get
        you up and running with the ability to deploy EC2 instances that can access the internet.  If necessary,
        they can also allow direct inbound access from the internet.

    - You can also configure custom VPCs to suit your business requirements.  When configuring a new VPC, you 
        need to define an IP address block from one of the private IP ranges.  Your VPC spans the entire Region
        in which you deploy it, so you can place workloads in different AZs within the VPC to design for high
        availability.



- VPC Subnets

    - Depending on your requirements, you can configure your non-default VPCs with multiple subnets.


    - A subnet is a subset of the VPC, and this is defined in the IP address block of the subnet.

        - For example, the IP address block of our VPC is 10.0.0.0/16.

        - We create the public 'Subnet-1' with a CIDR block of 10.0.1.0/24.

        - Other subnets defined in the VPC would need to have non-overlapping subsets of IP ranges from the
            primary VPC block.  For instance, 'Subnet-2' could have a CIDR block of 10.0.2.0/24.


    - Subnets are restricted to a single AZ.  This means that you can recreate multiple subnets across multiple
        AZs, which would host replica resources to offer high availability.  If a single AZ (and subnet) were to
        go offline, you can redirect traffic to a replica resource in the other subnet (in the other AZ).



- Internet Access

    - By default, your custom VPCs need to be configured with internet access if you want the EC2 instances in the
        VPC to send traffic to the internet.  Also, if you deploy servers that require direct inbound access from
        the internet, you need to deploy them in subnets that have a direct route to the internet.

    - You can define which subnets have direct access to the public internet, called 'public subnets'.  You can also
        define which subnets are private, called 'private subnets'.


    - To configure a VPC with internet access, you need to deploy an internet gateway.  This is a free component
        that can be attached to your VPC to grant the VPC internet access.

        - In addition, you need to configure route tables associated with the public subnet to have direct access
            to the internet gateway.

        - EC2 instances which are deployed in this public subnet can then send traffic to the public internet, and
            can be configured to receive direct inbound traffic from the internet.

        - An additional requirement is that your EC2 instances in the public subnet must also have a public IP
            address.  This can by dynamically assigned by AWS to the EC2 instances.  Note that this public IP
            address is dynamic, so if the EC2 instance is stopped and restarted, it will likely change.  In most
            cases, this is acceptable, since the EC2 instances are behind a load balancer.


    - If you need a static public IP address, you can configure your EC2 instances with an elastic IP address.

        - Elastic IP addresses are static and remain in your account until you release them.

        - Elastic IP addresses can be reassigned from one EC2 instance to another.  For instance, they can be
            automatically reassigned to a standby EC2 instance if the primary instance fails.

        - Elastic IP addresses are free only while they are associated with an EC2 instance in the 'Running' state.
            If you have an EC2 instance in the 'Stopped' state, you will incur charges for the elastic IP address
            on an hourly basis.


    - Example

        VPC
        10.0.0.0/16            |
                      Internet Gateway
                             |    |
                AZ 1A        |    |     AZ 1B
            --------------- /      \----------------

            [Public Subnet-1]      [Public Subnet-2]
            DMZ 10.0.1.0/24        DMZ 10.0.2.0/24
            Web Servers            Web servers

            [Private Subnet-1]     [Private Subnet-2]
            10.0.3.0/24            10.0.4.0/24
            DB Instance            DB Instance



- VPC Security

    - One of the primary reasons for building a VPC is to implement firewall security to ensure that access to the
        resources deployed within the VPC is carefully managed.  AWS offers 2 types of security services to build a
        secure environment, Security Groups and Network Access Control Lists.


    - Security Groups

        - A 'security group' is a firewall that is designed to allow you to configure what type of traffic you permit,
            inbound or outbound, to your EC2 instances.

        - When you launch an EC2 instance, you must assign at least one security group to it, which must contain the
            necessary rules for any inbound and outbound traffic you want to allow.  You can associate up to 5
            security groups with an instance.  Security groups act at the instance level, not at the subnet level.

        - Each VPC comes with a default security group that allows all traffic inbound, but only where the source of
            that traffic is the security group itself.  This means that if you have 2 EC2 instances associated with
            the same security group, then one instance will accept traffic initiated by the other instance.  In 
            addition, all outbound traffic to any destination is permitted (for example, so that the instances can
            download OS updates).

        - Security groups do not allow inbound traffic from other sources until you create the necessary rules.  If
            you are configuring a web server, you need to create an inbound rule for HTTP and specify the source
            of the traffic with an IP address range.

        - Note that even if you haven't configured inbound rules, responses to any outbound traffic will be permitted
            inbound.  This feature is what makes security groups stateful.


        - Some additional key features:

            - You can configure allow rules, but you cannot configure explicity deny rules.
            - You can specify separate rules for inbound and outbound traffic.
            - You can filter traffic based on protocols and port numbers.
            - You can specify sources and destinations that can be other security groups, offering a layered approach.


    - NACLs (Network Access Control Lists)

        - NACLs are another type of firewall service that are designed to protect entire subnets.  Instead of being
            configured at the instance level, they can be configured to allow of deny traffic from reaching subnets.

        - A default NACL is configured in every VPC, which is configured to allow all inbound and outbound traffic.
            This is acceptable, because traffic must still be configured via security groups, which block all
            inbound traffic by default.

        - You can configure your subnets with custom NACLs, which block all inbound and outbound traffic.  In this
            case, additional config will be required to create any necessary inbound and outbound rules.

        - NACLs are stateless, so you have to configure both inbound and corresponding outbound rules for traffic to
            flow and be responded to.



- NAT

    - We deploy public-facing resources such as web servers in public subnets, and we put other resources such as 
        DB servers or application servers (which should not be directly accessible from the internet) in private
        subnets.  However, application servers may need access to the internet to download updates or patches.

    - Since these servers won't have a public IP address, we need a mechanism for them to access the internet.
        To fulfill this requirement, we can set up and configure a NAT service.

    - This NAT service needs to be placed in the public subnet and have an elastic IP address attached to it.
        Your route table is then configured with a rule to allow internet-based traffic from EC2 instances in
        the private subnet to access the internet via this NAT service.  The NAT service relays requests, acting
        as a proxy.

    - Note that if you are using IPv6, and you want to ensure EC2 instances can access the internet this way, you
        need to route traffic from those instances via an 'egress-only internet gateway'.



- VPC Peering

    - A VPC peering connection is a private network connection between 2 VPCs.  The service allows you to connect
        multiple VPCs so that instances in one VPC can access resources in another VPC.

    - This means that traffic between 2 VPCs over a peering connection do not traverse the public internet, and
        this offers greater levels of bandwidth and security.  The connections between the peers are highly
        available and there is no single point of failure.

    - You can create VPC peering connections between VPCs in one account or between AWS accounts.  Peering connections
        can also be configured between VPCs in the same Region or across different Regions.



- VPC Transit Gateway

    - The problem with VPC peering is that every VPC must establish a one-to-one connection with its peer.  Once the
        connections have been established, you also need to configure your route tables in each of the peered VPCs
        to direct appropriate traffic across the peering connection.  If you have multiple VPCs that need to connect to
        each other, this leads to lots of individual connections and route table entries.

    - With AWS Transit Gateway, you can connect your individual VPCs together via the gateway in a hub-and-spoke model.
        Each VPC just needs a single connection to the Gateway, and can then route traffic to other VPCs as long as
        the necessary route table configurations allow it to do so.

    - Transit Gateways can greatly reduce the architectural design overhead when trying to connect many VPCs together.



- VPNs (Virtual Private Networks)

    - You can also connect your VPC to your corporate network (on-premises or a colocation data center).  This type of
        connection is known as a VPN.  

    - A 'VPN' is a secure encrypted site-to-site tunnel established between 2 endpoints over the public internet.  It
        offers AES 128 or 256-bit IPSec (Internet Protocol Security) encryption, which means you can transfer data
        between 2 endpoints securely.

    - To set up a VPN connection between your on-premises network and the VPC, you need to create a VPG (Virtual
        Private Gateway) and attach it to your VPC.  You will also need to configure a customer gateway, which is a
        physical or virtual device located in the on-premises network that connects to the VPG over the internet.

    - AWS supports a wide variety of customer gateway devices, including Cisco, Juniper, and Check Point devices.  Once
        the VPN connection has been established, you still need to configure the route tables on both the internal
        network and VPC to direct appropriate traffic over the tunnel.

    - Note that the bandwidth you get over a VPN connection is limited to what your ISP offers.  Also, AWS has a hard
        limit of 1.26 Gbps.  You are also dependent on the routing mechanisms of the public internet.  If you require
        a more dedicated connection that bypasses the public internet altogether, Amazon offers a service called
        Direct Connect.



- Direct Connect

    - Direct Connect is a service that enables you to connect your corporate data center to your VPC and AWS public
        services that bypasses the internet altogether.  This requires laying down fiber cabling between your
        corporate office and a local Amazon Direct Connect partner.  These links can operate at 1 Gbps, 10 Gbps, or
        even 100 Gbps, and offer an ultra-high-speed, secure private connection.



- DNS and Global Routing with Route53

    - Route53 is AWS's global DNS.  It offers 3 primary functions:

        1. Domain registration
        2. DNS routing
        3. Health checks



- Domain Registration

    - To use a domain name for your website, you need to register it with a domain registrar.  Route53 offers
        complete domain name registration services.  When you choose a name to register, you do it under a 
        TLD (Top-Level Domain) such as .com, .org, or .co.uk.

    - As part of the registration, you purchase a lease duration for your domain name, which can be anywhere from 1-10
        years.  You need to renew this lease before expiry, or someone else will be able to register the name.

    - Once you have registered the domain name, you need to host it with a DNS service provider.  Often, the 
        registration and hosting are offered by the same company (Route53 in this case).  The hosting service allows
        you to create resource records for your domain, for instance to configure the domain name to point to the IP
        address of a web server.


    - There are several types of resource records that you can create.  Examples include:

        - Name:              iaasacademy.com
          Type:              A - IPv4 Address
          Value:             92.204.222.124
          Description:       Points to server or load balancer hosting the website

        - Name:              iaasacademy.com
          Type:              MX - Mail exchange
          Value:             iaasacademy-com.mail.protection.outlook.com
          Description:       Points to email server / service provider

        - Name:              portal.iaasacademy.com
          Type:              CNAME
          Value:             iaasacademy.com
          Description:       Canonical name to map one domain name to another


    - When configuring your domain names, you also need to define a zone file, which will host resource records for
        your domain name.  It is in a zone file where you create resource records, such as the A record.



- Hosted Zones

    - To create the necessary resource records for your domain name, you need to set up a hosted zone on Route53.
        A 'hosted zone' is a container that is used to store and manage your resource records and allows you to
        define how traffic is routed to your domain (ie 'example.com') and any subdomains (ie 'portal.example.com').


    - There are 2 types of hosted zones you can set up on Route53:

        1. Public hosted zone

             This is a container that allows you to define how you want to route traffic for your domain name across
               the public internet.

        2. Private hosted zone

             This is a container that allows you to define how you want to route traffic for your domain name across
               private networks, such as one or more of your VPCs.  Route53 will route traffic for the domain name to
               resources configured in your VPCs based on the resource records you create.  For example, you could
               use a friendly name like 'devserver.example.com' that points to an EC2 instance within your VPCs,
               which other resources in the VPC can then connect to.  This is much easier to manage than hard-coded
               IP addresses.



- DNS Hostnames

    - AWS provides a DNS server (Route53 Resolver) for your VPC.  This enables AWS to configure DNS hostnames for the
        instances you deploy in your VPC.


    - DNS hostnames comprise a hostname and a domain name, such as 'myserver.mycompany.com'.  Hostnames allow you to
        create unique names for your EC2 instances.  In addition, AWS provides 2 types of DNS hostnames:


        - Private DNS hostnames = These resolve to the private IPv4 address of the instance.  The DNS hostname can take
                                    one of the following forms:

                                    ip-private-ipv4-address.ec2.internal              # For the us-east-1 Region
                                    ip-private-ipv4-address.region.compute.internal   # For other Region


        - Public DNS hostnames  = These resolve a public DNS hostname to the public IPv4 address of the instance
                                    outside the network of the instance.  The DNS hostname can take one of the following
                                    forms:

                                    ec2-public-ipv4-address.compute-1.amazonaws.com         # For the us-east-1
                                    ec2-public-ipv4-address.region.compute.amazonaws.com    # For other Regions



- Routing Policies

    - Route53 also offers several complex routing policies and configurations.  These routing policies enable you to 
        define various rules that offer the ability to build highly available solutions or redirect customers to
        resources that are closer to their location and reduce latency.


    - Here are the various routing policies available with Route53:

        - Simple routing policy

            This is the most basic and default routing policy.  This resource record allows you to map a domain name
              to a single resource, such as an IP address or DNS endpoint of an elastic load balancer.  The policy
              engine will not check whether the resource is functioning and available.


        - Failover routing policy

            To offer high availability, you can host 2 copies of your resources, ideally across different Regions.
              One set of resources will be designated as the primary, and the other as the secondary.  Route53 performs
              health checks on the primary, and will redirect traffic to the secondary on a failure to connect to the
              primary.  This gives you an active-passive failover.


        - Geolocation routing policy

            This routing policy enables you to route traffic based on the geographical location of the users.  The user's
              location is determined from the source of DNS queries to the service.  This is particular useful when you 
              need to ensure your content is only accessible in locations where you have distribution rights.


        - Latency routing policy

            This routing policy is useful when you have resources deployed in multiple Regions, and you wish to route
              your users' traffic to the Region that offers the lowest latency.


        - Weighted routing policy

            This routing policy enables you to route different ratios of your total traffic to different resources
              associated with a single domain.  For example, you could route 3/4 of the traffic to one copy of a resource
              and 1/4 to another copy.  This is particularly useful when performing a rolling update.



- Health Checks

    - Route53 can be used to perform health checks against your resources, such as web servers, elastic load balancers
        and static web sites.  There are 3 types of health checks:


        - Health checks that monitor an endpoint

            This monitors an endpoint you specify, such as an IP address or domain name


        - Health checks that monitor other health checks

            This can be used to monitor multiple resources, and the overall health of a collection of resources based on
              some minimum number of resources that are healthy.  If the number drops below the minimum threshold, Route53
              can take appropriate action.


        - Health checks that monitor CloudWatch alarms:

            You can create CloudWatch alarms that monitor your resources' metrics (for example, the number of healthy EC2
              instances behind an elastic load balancer).  You can configure Route53 to monitor the same data stream that
              CloudWatch monitors for the alarms and will mark the resource as unhealthy if the thereshold values are
              crossed.



- Traffic Flow and Routing Policies

    - You may need to create complex routing of traffic using a combination of resource records and routing policies.
        For instance, you may create latency routing policies across several regions, the reference weighted records in
        each region for your resources.  Each configuration is known as a 'traffic policy', and Route53 provides a visual
        editor to design them.


    - Note that you can only use a traffic flow to create records in publicly hosted zones:

        1. Geoproximity routing policy = This allows you to route traffic based on the location of your resources

        2. Route53 Resolver = You can perform DNS resolution between the Route53 Resolver and DNS resolvers on your
                                network by configuring forwarding rules.  In this case, your network can comprise your
                                VPC, other peered VPCs, or even your on-premises data centers.



- Implementing a CDN with CloudFront

    - AWS CloudFront is a CDN that helps you distribute your static and dynamic digital content globally with low-latency
        connections.  CloudFront uses edge locations and regional edge caches to cache content closer to your end users'
        locations.

    - You can host your content in one specific Region, and a user who attempts to access it in another Region will
        retrieve the content via the edge location over the AWS backbone network.  Also, the content will be cached at
        a local edge location closer to the user for a period (known as the TTL or Time-to-Live).

    - To configure CloudFront, you create a distribution endpoint that defines the type of content you want to serve
        and the source of that content.  The source can be an S3 bucket, an S3 bucket configured as a static website, 
        an EC2 instance, an elastic load balancer, or others.  As part of your configuration, you get a CloudFront URL,
        which you provide to your users to access your content via CloudFront.  You can also use company-branded custom
        URLs.


    - When you configure your CloudFront distributions, you can choose to serve your content over HTTP and HTTPS.  Some
        examples of types of content that can be served include:

        - Static and dynamic content (ie HTML, CSS, JavaScript, images)
        - Video on demand in different formats (ie Apple HTTP Live Streaming and Microsoft Smooth Streaming)
        - Live events and conferences



- Choosing a Price Class for Your CloudFront Distribution

    - Instead of charging on a per-edge-location basis, Amazon has aggregated edge location across Regions into 3
        specific price classes:


        1. All edge locations globally

             This is the default, the most expensive option, and offers the best performance.


        2. United States; Canada; Europe; Hong Kong, Philippines, South Korea, Taiwan, Singapore; Japan; India; 
             South Africa; and Middle East regions

             This class excludes the most expensive regions.


        3. United States, Canada, and Europe

            This class is the least expensive.



- Amazon API Gateway

    - Amazon API Gateway helps you design application solutions that favor microservices architectures.  Without an API
        gateway, frontend developers must be aware of all backend APIs and call each of them separately.  With an API
        gateway, you create an abstraction layer that exposes all APIs that need to be made available to clients.

    - Amazon API Gateway can provide access to backend data, Lambda functions, databases, and more.  It handles all
        incoming traffic and is capable of processing thousands of concurrent API calls.

    - API Gateway also has features such as authorization, access control, monitoring, and protection against DDoS
        attacks.

    - API Gateway offers optimization features such as response caching and payload compression.



- Exercise - Set Up a Public Subnet VPC